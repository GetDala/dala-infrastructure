AWSTemplateFormatVersion: '2010-09-09'
Description: Wala MicroRaiden CloudFormation Server Stack
Parameters:
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: SSH key that will be used for EC2 instances (set up in web console)
    ConstraintDescription: needs to be an existing EC2 keypair (set up in web console)
  StackRegion:
    Type: String
    Description: The region that your stack will deployed to
  DalaInfrastructureStackName:
    Type: String
    Description: The region that your stack will deployed to
  StackStage:
    Type: String
    Description: The stage that was deployed on your stack  
  Environment:
    Type: String
    Description: The stage that was deployed on your stack 
  RPCPROVIDER:
    Type: String
    Description: The RPC server address 
  ChannelManagerAddress:
    Type: String
    Description: The microraiden channel manager address
   
Resources:
  MicroRaidenNLBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: MicroRaiden-sg
      GroupDescription: ELB (load balancer) MicroRaiden security group
      VpcId:
        'Fn::ImportValue': 
           'Fn::Sub': "${DalaInfrastructureStackName}-DalaVPC"
      SecurityGroupIngress:
          - IpProtocol: '-1'
            CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
          - IpProtocol: '-1'
            CidrIp: 0.0.0.0/0  

  MicroRaidenNLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: micro-raiden-load-balancer
      Scheme: internal
      Subnets:
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
      Tags:
        - Key: Name
          Value: MicroRaiden-nlb
      Type: network
  MiroRaidenTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 5000
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      Name: mircoraiden-paywalls
      Port: 5000
      Protocol: TCP
      Tags:
        - Key: Name
          Value: microraiden-targetgroup
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: 
        'Fn::ImportValue': 
           'Fn::Sub': "${DalaInfrastructureStackName}-DalaVPC"
  MicroRaidenListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MiroRaidenTargetGroup
      LoadBalancerArn:
        Ref: MicroRaidenNLB
      Port: '80'
      Protocol: TCP


  MicroRaidenServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MicroRaidenNLB
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT5M
    Properties:
      VPCZoneIdentifier:
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
      LaunchConfigurationName:
         Ref: MicroRaidenLaunchConfig
      MinSize: '1'
      MaxSize: '4'
      TargetGroupARNs: 
        - Ref: MiroRaidenTargetGroup
      Tags:
        - Key: Name
          Value: MicroRaiden-web-server
          PropagateAtLaunch: true
  
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole
  
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: MircoRaidenInstancePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action:
            - "cloudformation:Describe*"
            - "cloudformation:List*"
            - "cloudformation:Get*"
            - "cloudformation:PreviewStackUpdate"
            - "cloudformation:SignalResource"
            Resource: '*' 
          - Effect: Allow
            Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Resource: 
              "Fn::Sub": arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DalaTokenEvents  
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:DescribeImages
            - ecr:BatchGetImage
            - ssm:DescribeParameters
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - lambda:GetFunction
            Resource: 
              "Fn::Sub": 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource:
              "Fn::Sub": 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource:
              "Fn::Sub": 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'

  MicroRaidenLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: micro-raiden-logs

  MicroRaidenLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-6d48500b
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: InstanceProfile
      InstanceType: t2.micro
      KeyName:
        Ref: KeyPair
      SecurityGroups:
        - 'Fn::ImportValue': 
            'Fn::Sub': "${DalaInfrastructureStackName}-DalaInstanceSecurityGroupId"
      UserData:
        "Fn::Base64":
          "Fn::Sub": 
              |
                  #!/bin/bash 
                  apt-get update -y 
                  apt-get -y install python-setuptools python-pip
                  apt -y install awscli
                  mkdir aws-cfn-bootstrap-latest
                  curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
                  easy_install aws-cfn-bootstrap-latest
                  apt install -y docker.io screen
                  LOGIN=$(aws ecr get-login --region ${AWS::Region})
                  ${!LOGIN}
                  docker pull ${AWS::AccountId}.dkr.ecr.eu-west-1.amazonaws.com/dala-microraiden:${StackStage}
                  /usr/bin/screen -m -d -S docker docker run -e LC_ALL=C.UTF-8 -e LANG=C.UTF-8 -e AWS_DEFAULT_REGION=${AWS::Region} -e ENVIRONMENT=${Environment} -e RPC_PROVIDER="${RPCPROVIDER}" -e CHANNEL_MANAGER_ADDRESS="${ChannelManagerAddress}" -p 8545:8545 -p 80:80 -p 443:443 -p 5000:5000 --log-driver=awslogs --log-opt awslogs-group=micro-raiden-logs  ${AWS::AccountId}.dkr.ecr.eu-west-1.amazonaws.com/dala-microraiden:${StackStage}

Outputs:
  MircoRaidenNLBHostName:
    Description: DNS host for the ELB
    Value:
     Fn::Join:
            - ''
            - 
                - http://
                - 'Fn::GetAtt':
                  - MicroRaidenNLB
                  - DNSName
    Export:
      Name: 
        'Fn::Sub': ${AWS::StackName}-MircoRaidenNLBHostName