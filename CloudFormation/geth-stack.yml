AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for ethereum node deployment
Parameters:
    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
        Type: 'AWS::EC2::KeyPair::KeyName'
        ConstraintDescription: Can contain only ASCII characters.
    InstanceCount:
        Description: Number of instances to deploy
        Type: Number
        ConstraintDescription: Integers only
    ETHStatsServer:
        Description: Ethstats server
        Type: String
        Default: t2.micro
        AllowedValues:
            - t1.micro
            - t2.micro
            - t2.small
            - t2.medium
            - m1.small
            - m1.medium
            - m1.large
        ConstraintDescription: Must be a valid EC2 instance type
    ETHStatsPassword:
        Description: Password to connect to ethstats server
        Type: String
        ConstraintDescription: String only
    InstanceType:
        Description: WebServer EC2 instance type
        Type: String
        Default: t2.medium
        AllowedValues:
            - t1.micro
            - t2.micro
            - t2.small
            - t2.medium
            - m1.small
            - m1.medium
            - m1.large
            - m1.xlarge
            - m2.xlarge
            - m2.2xlarge
            - m2.4xlarge
            - m3.medium
            - m5.large
            - m3.xlarge
            - m3.2xlarge
            - c1.medium
            - c1.xlarge
            - c3.large
            - c3.xlarge
            - c3.2xlarge
            - c3.4xlarge
            - c3.8xlarge
            - g2.2xlarge
            - r3.large
            - r3.xlarge
            - r3.2xlarge
            - r3.4xlarge
            - r3.8xlarge
            - i2.xlarge
            - i2.2xlarge
            - i2.4xlarge
            - i2.8xlarge
            - hi1.4xlarge
            - hs1.8xlarge
            - cr1.8xlarge
            - cc2.8xlarge
            - cg1.4xlarge
            - i3.large
            - i3.xlarge
            - i3.2xlarge
            - i3.4xlarge
            - i3.8xlarge
            - i3.16xlarge
        ConstraintDescription: Must be a valid EC2 instance type
    SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 0.0.0.0/0
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    DockerImage:
        Description: The docker image to use
        Type: String
        ConstraintDescription: String only
    DalaInfrastructureStackName:
        Description: Dala Infrastructure Stackname
        Type: String
Mappings:
    AWSInstanceType2Arch:
        t1.micro:
            Arch: '64'
        t2.micro:
            Arch: '64'
        t2.small:
            Arch: '64'
        t2.medium:
            Arch: '64'
        m1.small:
            Arch: '64'
        m1.medium:
            Arch: '64'
        m1.large:
            Arch: '64'
        m1.xlarge:
            Arch: '64'
        m2.xlarge:
            Arch: '64'
        m2.2xlarge:
            Arch: '64'
        m2.4xlarge:
            Arch: '64'
        m3.medium:
            Arch: '64'
        m5.large:
            Arch: '64'
        m3.xlarge:
            Arch: '64'
        m3.2xlarge:
            Arch: '64'
        c1.medium:
            Arch: '64'
        c1.xlarge:
            Arch: '64'
        c3.large:
            Arch: '64'
        c3.xlarge:
            Arch: '64'
        c3.2xlarge:
            Arch: '64'
        c3.4xlarge:
            Arch: '64'
        c3.8xlarge:
            Arch: '64'
        g2.2xlarge:
            Arch: '64'
        r3.large:
            Arch: '64'
        r3.xlarge:
            Arch: '64'
        r3.2xlarge:
            Arch: '64'
        r3.4xlarge:
            Arch: '64'
        r3.8xlarge:
            Arch: '64'
        i2.xlarge:
            Arch: '64'
        i2.2xlarge:
            Arch: '64'
        i2.4xlarge:
            Arch: '64'
        i2.8xlarge:
            Arch: '64'
        hi1.4xlarge:
            Arch: '64'
        hs1.8xlarge:
            Arch: '64'
        cr1.8xlarge:
            Arch: '64'
        cc2.8xlarge:
            Arch: '64'
        i3.large:
            Arch: '64'
        i3.xlarge:
            Arch: '64'
        i3.2xlarge:
            Arch: '64'
        i3.4xlarge:
            Arch: '64'
        i3.8xlarge:
            Arch: '64'
        i3.16xlarge:
            Arch: '64'
    AWSRegionArch2AMI:
        ap-northeast-1:
            '64': ami-785c491f
        ap-northeast-2:
            '64': ami-94d20dfa
        ap-south-1:
            '64': ami-49e59a26
        ap-southeast-1:
            '64': ami-2378f540
        ap-southeast-2:
            '64': ami-e94e5e8a
        ca-central-1:
            '64': ami-7ed56a1a
        eu-central-1:
            '64': ami-1c45e273
        eu-west-1:
            '64': ami-6d48500b
        eu-west-2:
            '64': ami-cc7066a8
        sa-east-1:
            '64': ami-34afc458
        us-east-1:
            '64': ami-d15a75c7
        us-east-2:
            '64': ami-8b92b4ee
        us-west-1:
            '64': ami-73f7da13
        us-west-2:
            '64': ami-835b4efa
Resources:
    ETHRPCSecurity:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enable Geth RPC Port
            SecurityGroupIngress:
                - IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0
            VpcId:
                'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-DalaVPC"

    GethELBSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enable Geth RPC Port
            SecurityGroupIngress:
                - IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0
            VpcId:
                'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-DalaVPC"
            Tags:
                - Key: Name
                  Value: geth-elb-sg
    GethLoadBalancer:
        Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
        Properties:
            Subnets:
              - 'Fn::ImportValue': 
                  'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
              - 'Fn::ImportValue': 
                  'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
              - 'Fn::ImportValue': 
                  'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
            Listeners:
                - 
                    LoadBalancerPort: '80'
                    InstancePort: '8545'
                    Protocol: HTTP
            HealthCheck:
                Target: 'TCP:8545'
                HealthyThreshold: '3'
                UnhealthyThreshold: '5'
                Interval: '30'
                Timeout: '5'
            CrossZone: 'true'
            Scheme: internal
            Tags:
                -   Key: Name
                    Value: geth-elb
            SecurityGroups:
                - Ref: GethELBSecurityGroup
                
    GETHAutoScalingGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
            VPCZoneIdentifier:
                - 'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
                - 'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
                - 'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
            MinSize:
                Ref: InstanceCount
            MaxSize:
                Ref: InstanceCount
            LoadBalancerNames:
                - Ref: GethLoadBalancer
            LaunchConfigurationName:
                Ref: LaunchConfiguration
            Tags:
                -   
                    Key: Name
                    Value: geth-node
                    PropagateAtLaunch: true

    ParityAutoScalingGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
            VPCZoneIdentifier:
                - 'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
                - 'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
                - 'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
            MinSize:
                Ref: InstanceCount
            MaxSize:
                Ref: InstanceCount
            LoadBalancerNames:
                - Ref: GethLoadBalancer
            LaunchConfigurationName:
                Ref: ParityLaunchConfiguration
            Tags:
                -   
                    Key: Name
                    Value: parity-node
                    PropagateAtLaunch: true                    
    
    LaunchConfiguration:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:
            ImageId:
                'Fn::FindInMap':
                    - AWSRegionArch2AMI
                    -  Ref: 'AWS::Region'
                    - 'Fn::FindInMap':
                            - AWSInstanceType2Arch
                            - Ref: InstanceType
                            - Arch
            InstanceType:
                Ref: InstanceType
            BlockDeviceMappings:
                - 
                    DeviceName: /dev/sda1
                    Ebs:
                        VolumeSize: '1000'
                        VolumeType: gp2
            KeyName:
                Ref: KeyName
            SecurityGroups:
                - Ref: ETHRPCSecurity
            AssociatePublicIpAddress: false
            UserData:
                'Fn::Base64':
                      "Fn::Sub": 
                        - |
                            #!/bin/bash -xe
                                apt update -y
                                apt install -y docker.io screen
                                mkdir /ethereum
                                docker pull ${DockerImage}
                                /usr/bin/screen -m -d -S docker docker run -e WS_SECRET='"${ETHStatsPassword}"' -e WS_SERVER='http://${EthStatsPrivateIp}:3000' -e INSTANCE_NAME=`curl http://169.254.169.254/latest/meta-data/instance-id` -it -p 8545:8545 -p 30303:30303 -v /ethereum:/root/.ethereum ${DockerImage}
                        - EthStatsPrivateIp:
                            'Fn::GetAtt': 
                              - EthstatsInstance
                              - PrivateIp

    ParityLaunchConfiguration:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:
            ImageId: ami-6d48500b
            InstanceType:
                Ref: InstanceType
            BlockDeviceMappings:
                - 
                    DeviceName: /dev/sda1
                    Ebs:
                        VolumeSize: '500'
                        VolumeType: gp2
            KeyName:
                Ref: KeyName
            SecurityGroups:
                - Ref: ETHRPCSecurity
            AssociatePublicIpAddress: false
            UserData:
                'Fn::Base64':
                      "Fn::Sub": 
                        - |
                            #!/bin/bash -xe
                                apt update -y
                                apt install -y docker.io screen
                                mkdir /ethereum
                                docker pull dalaorg/docker-geth-parity:latest
                                /usr/bin/screen -m -d -S docker docker run -e WS_SECRET='"${ETHStatsPassword}"' -e WS_SERVER='http://${EthStatsPrivateIp}:3000' -e INSTANCE_NAME=`curl http://169.254.169.254/latest/meta-data/instance-id && echo "_parity_node"` -it -p 8545:8545 -p 30303:30303 -v /ethereum:/root/.ethereum dalaorg/docker-geth-parity:latest
                        - EthStatsPrivateIp:
                            'Fn::GetAtt': 
                              - EthstatsInstance
                              - PrivateIp

    EthstatsInstance:
        Type: 'AWS::EC2::Instance'
        DependsOn: ETHStatsSecurity
        Properties:
            ImageId:
                'Fn::FindInMap':
                    - AWSRegionArch2AMI
                    -  Ref: 'AWS::Region'
                    - 'Fn::FindInMap':
                            - AWSInstanceType2Arch
                            - Ref: InstanceType
                            - Arch
            InstanceType:
                Ref: ETHStatsServer
            BlockDeviceMappings:
                - 
                  DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: '15'
            KeyName:
                Ref: KeyName
            Tags:
                - 
                  Key: Name
                  Value: ETHStatsServer
            SecurityGroupIds:
                - Ref: ETHStatsSecurity
            SubnetId:
                'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
            UserData:
                'Fn::Base64':
                    "Fn::Sub": |
                          #!/bin/bash -xe
                          apt update -y
                          apt install -y docker.io screen
                          docker pull myetherwallet/docker-geth-lb:ethstats-instance
                          /usr/bin/screen -m -d -S docker docker run -it -e WS_SECRET='"${ETHStatsPassword}"' -p 3000:3000 myetherwallet/docker-geth-lb:ethstats-instance
    ETHStatsSecurity:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enable Geth RPC Port
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '3000'
                    ToPort: '3000'
                    CidrIp: 0.0.0.0/0
                - 
                    IpProtocol: tcp
                    FromPort: '22'
                    ToPort: '22'
                    CidrIp:
                        Ref: SSHLocation
            VpcId:
                'Fn::ImportValue': 
                    'Fn::Sub': "${DalaInfrastructureStackName}-DalaVPC"
Outputs:
    URL:
        Description: The URL of the nodes
        Value:
            Fn::Join:
            - ''
            - 
                - http://
                - Fn::GetAtt:
                    - GethLoadBalancer
                    - DNSName
        Export:
         Name: 
            'Fn::Sub': ${AWS::StackName}-GethURL
    ETHStatsIP:
        Description: IP address of the ethstats server
        Value:
            Fn::Join:
            - ''
            - 
                - http://
                - Fn::GetAtt:
                    - EthstatsInstance
                    - PrivateIp
                - ":3000"

