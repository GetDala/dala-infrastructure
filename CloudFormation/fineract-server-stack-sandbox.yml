AWSTemplateFormatVersion: '2010-09-09'
Description: Wala Fineract CloudFormation Server Stack
Parameters:
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: SSH key that will be used for EC2 instances (set up in web console)
    ConstraintDescription: needs to be an existing EC2 keypair (set up in web console)
  FineractDatabaseUsername:
    Type: String
    Description: Fineract database username
  FineractDatabasePassword:
    Type: String
    Description: Fineract database password
  StorageStack:
    Type: String
    Description: The name of the Storage Stack
  StackRegion:
    Type: String
    Description: The region that your stack will deployed to
  DalaInfrastructureStackName:
    Type: String
    Description: The stackname of the dala infrastructure stack
  SSLCertificateARN:
    Type: String
    Description: SSL certificate arn for the fineract stack

Resources:
  FineractElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: fineract-sg
      GroupDescription: ELB (load balancer) Fineract security group
      VpcId:
        'Fn::ImportValue':
           'Fn::Sub': "${DalaInfrastructureStackName}-DalaVPC"
      SecurityGroupIngress:
          - IpProtocol: '-1'
            CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
          - IpProtocol: '-1'
            CidrIp: 0.0.0.0/0

  FineractELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '5'
        Target: 'HTTP:8000/'
        Timeout: '3'
        UnhealthyThreshold: '2'
      Listeners:
        - InstancePort: '8443'
          InstanceProtocol: HTTP
          LoadBalancerPort: '443'
          Protocol: HTTPS
          SSLCertificateId:
            Ref: SSLCertificateARN
      Scheme: internal
      Subnets:
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
      CrossZone: 'true'
      SecurityGroups:
        - Ref: FineractElbSecurityGroup
      Tags:
        - Key: Name
          Value: fineract-elb


  FineractWebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: FineractDataSetupServer
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      VPCZoneIdentifier:
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetAId"
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetCId"
      LaunchConfigurationName:
         Ref: FineractLaunchConfig
      MinSize: '2'
      MaxSize: '2'
      LoadBalancerNames:
        - Ref: FineractELB
      Tags:
        - Key: Name
          Value: fineract-web-server
          PropagateAtLaunch: true


  FineractLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-acd005d5
      IamInstanceProfile:
        'Fn::ImportValue':
          'Fn::Sub': "${DalaInfrastructureStackName}-DalaInstanceRoleArn"
      InstanceType: t2.medium
      KeyName:
        Ref: KeyPair
      SecurityGroups:
        - 'Fn::ImportValue':
            'Fn::Sub': "${DalaInfrastructureStackName}-DalaInstanceSecurityGroupId"
      UserData:
        "Fn::Base64":
          "Fn::Sub":
            - |
                      #!/bin/bash -xe
                      /usr/bin/yum -y update
                      /usr/bin/yum -y update aws-cfn-bootstrap
                      /usr/bin/yum -y localinstall http://mirrors.dotsrc.org/jpackage/6.0/generic/free/RPMS/jpackage-release-6-3.jpp6.noarch.rpm
                      /usr/bin/yum -y update
                      /usr/bin/yum -y remove java-1.7.0-openjdk
                      /usr/bin/yum -y install java-1.8.0-openjdk
                      /usr/bin/yum -y install java-1.8.0
                      /usr/bin/yum -y install gcc-c++ make
                      export JAVA_HOME=/usr/java/jdk1.8.0_60/jre
                      /usr/bin/yum install -y awslogs
                      /usr/bin/yum install -y tomcat7
                      mkdir -p /var/awslogs/etc
                      mkdir -p /var/awslogs/state

                      [ -e /etc/awslogs/awslogs.conf ] && rm /etc/awslogs/awslogs.conf
                      touch /etc/awslogs/awslogs.conf
                      echo "[general]
                      state_file = /var/awslogs/state/agent-state
                      region = ${AWS::Region}

                      [/var/log/cloud-init.log]
                      file = /var/log/cloud-init.log
                      log_stream_name = cloud-init.log
                      log_group_name = ${LogGroupName}
                      datetime_format = %b %d %H:%M:%S

                      [/var/log/cfn-init.log]
                      file = /var/log/cfn-init.log
                      log_group_name = ${LogGroupName}
                      log_stream_name = cloud-init.log

                      [/var/log/cfn-wire.log]
                      file = /var/log/cfn-wire.log
                      log_group_name = ${LogGroupName}
                      log_stream_name = cfn-wire.log
                      datetime_format =%b %d %H:%M:%S

                      [/var/log/tomcat7/catalina.out]
                      file = /var/log/tomcat7/catalina.out
                      log_group_name = ${LogGroupName}
                      log_stream_name = catalina
                      datetime_format =%b %d %H:%M:%S

                      " >  /etc/awslogs/awslogs.conf

                      chkconfig tomcat7 on
                      chkconfig awslogs on
                      [ ! -e apache-activemq-5.14.3-bin.tar.gz ] && wget https://archive.apache.org/dist/activemq/5.14.3/apache-activemq-5.14.3-bin.tar.gz
                      tar -zxvf apache-activemq-5.14.3-bin.tar.gz -C /opt

                      [ ! -e /opt/activemq ]  && ln -s /opt/apache-activemq-5.14.3 /opt/activemq
                      /opt/activemq/bin/activemq start
                      curl https://s3-eu-west-1.amazonaws.com/wala-fineract-dev/fineract-provider-sandbox.war --output /usr/share/tomcat7/webapps/fineract-provider.war
                      curl https://s3-eu-west-1.amazonaws.com/wala-fineract-dev/mysql-connector-java-5.1.36-bin.jar --output /usr/share/tomcat7/lib/mysql-connector-java-5.1.36-bin.jar
                      curl https://s3-eu-west-1.amazonaws.com/wala-fineract-dev/server-sandbox.xml --output /tmp/server.xml
                      [ -e /usr/share/tomcat7/conf/server.xml ] && rm /usr/share/tomcat7/conf/server.xml
                      sed -e 's@%DATABASE_URL%@${DatabaseCluster}:${DatabaseClusterPort}/mifosplatform-tenants@' -e 's@%FINERACT_USERNAME%@${FineractDatabaseUsername}@' -e 's@%FINERACT_PASSWORD%@${FineractDatabasePassword}@' /tmp/server.xml >> /usr/share/tomcat7/conf/server.xml
                      service awslogs start
                      service tomcat7 start

                      curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -
                      /usr/bin/yum install -y nodejs
                      npm install -g forever
                      wget --no-check-certificate --content-disposition https://github.com/GetDala/fineract-health-check/tarball/master -O fineractHealthCheck.tar.gz
                      [ -e fineractHealthCheck ] && rm -rf fineractHealthCheck
                      mkdir fineractHealthCheck
                      tar -zxvf fineractHealthCheck.tar.gz -C fineractHealthCheck
                      cd fineractHealthCheck/*/
                      npm install
                      FINERACT_USERNAME=mifos FINERACT_PASSWORD=password forever start index.js
                      rm /var/lib/cloud/instances/*/sem/config_scripts_user
                      /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource FineractWebServerGroup
            - LogGroupName:
                 'Fn::ImportValue':
                    'Fn::Sub': "${DalaInfrastructureStackName}-DalaServerLogs"
              DatabaseCluster:
                  'Fn::ImportValue':
                    'Fn::Sub': "${StorageStack}-FineractDBClusterEndpointAddress"
              DatabaseClusterPort:
                  'Fn::ImportValue':
                    'Fn::Sub': "${StorageStack}-FineractDBClusterEndpointPort"

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: FineractWebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: FineractWebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '75'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: FineractWebServerGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '2'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if CPU is loweer or metric disappears indicating instance is down
      Period: '300'
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: FineractWebServerGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  FineractDataSetupServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-acd005d5
      IamInstanceProfile:
        'Fn::ImportValue':
          'Fn::Sub': "${DalaInfrastructureStackName}-DalaInstanceRoleArn"
      InstanceType: t2.micro
      KeyName:
        Ref: KeyPair
      SubnetId:
        'Fn::ImportValue':
          'Fn::Sub': "${DalaInfrastructureStackName}-PrivateSubnetBId"
      SecurityGroupIds:
        - 'Fn::ImportValue':
           'Fn::Sub': "${DalaInfrastructureStackName}-DalaInstanceSecurityGroupId"
      Tags:
        - Key: Name
          Value: fineract-database-setup-srv
      UserData:
        "Fn::Base64":
          "Fn::Sub":
              - |
                      #!/bin/bash -xe
                      /usr/bin/yum -y update
                      /usr/bin/yum -y update aws-cfn-bootstrap
                      /usr/bin/yum -y localinstall http://mirrors.dotsrc.org/jpackage/6.0/generic/free/RPMS/jpackage-release-6-3.jpp6.noarch.rpm
                      /usr/bin/yum -y update
                      /usr/bin/yum install -y awslogs
                      /usr/bin/yum install -y mysql
                      mysql -u ${FineractDatabaseUsername} -p${FineractDatabasePassword} -h ${DatabaseCluster} <<EOF
                      CREATE DATABASE IF NOT EXISTS \`mifosplatform-tenants\`
                      EOF
                      mysql -u ${FineractDatabaseUsername} -p${FineractDatabasePassword} -h ${DatabaseCluster} <<EOF
                      CREATE DATABASE IF NOT EXISTS \`mifostenant-default\`
                      EOF
                      wget --no-check-certificate --content-disposition https://github.com/GetWala/fineract/tarball/develop -O fineractLastest.tar.gz
                      [ -e mifos ] && rm -rf mifos
                      mkdir mifos
                      tar -zxvf fineractLastest.tar.gz -C mifos
                      cd mifos/*/
                      ./gradlew -q -PmysqlPath=${DatabaseCluster} -PmysqlPassword=${FineractDatabasePassword} -PmysqlUser=${FineractDatabaseUsername} migrateTenantListDB
                      ./gradlew -q -PmysqlPath=${DatabaseCluster} -PmysqlPassword=${FineractDatabasePassword} -PmysqlUser=${FineractDatabaseUsername} migrateTenantD
                      mysql -u ${FineractDatabaseUsername} -p${FineractDatabasePassword} -h ${DatabaseCluster}  mifosplatform-tenants <<EOF
                      UPDATE tenant_server_connections SET schema_server = "${DatabaseCluster}",
                      schema_username = "${FineractDatabaseUsername}",
                      schema_password = "${FineractDatabasePassword}" where id=1
                      EOF
                      rm /var/lib/cloud/instances/*/sem/config_scripts_user
                      /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource FineractDataSetupServer
              - DatabaseCluster:
                 'Fn::ImportValue':
                    'Fn::Sub': "${StorageStack}-FineractDBClusterEndpointAddress"

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M

Outputs:
  FineractELBHostName:
    Description: DNS host for the ELB
    Value:
      'Fn::GetAtt':
        - FineractELB
        - DNSName
    Export:
      Name:
        'Fn::Sub': ${AWS::StackName}-FineractELBHostName
